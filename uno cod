// Pinide määramine
int motor_left_enable = 6;  // ENA (Vasaku mootori lubamine)
int motor_left_input1 = 7;  // IN1 (Vasaku mootori suund 1)
int motor_left_input2 = 5;  // IN2 (Vasaku mootori suund 2)
int motor_right_enable = 3; // ENB (Parem mootori lubamine)
int motor_right_input1 = 4; // IN3 (Parem mootori suund 1)
int motor_right_input2 = 2; // IN4 (Parem mootori suund 2)
int trigPin = 13;           // Ultrasonilise anduri trigger pin (triger)
int echoPin = 12;           // Ultrasonilise anduri echo pin (kaja)
int motor_speed = 255;      // Mootori kiirus (0-255)

// Kauguse lävend sentimeetrites
const int distance_threshold = 5;

// Määratleme mootori suuna konstantideks, et kood oleks arusaadavam
const int FORWARD = HIGH;   // Edasi liikumine
const int BACKWARD = LOW;   // Tagasi liikumine

// Määratleme ajutise piiri konstant kauguse mõõtmise jaoks
const long ECHO_TIMEOUT = 30000; // Aja ületamise piir (mikrosekundites)

void setup() {
  // Algatame seriaalühenduse
  Serial.begin(9600);

  // Mootori juhtimise pinid seadistatakse väljunditeks
  pinMode(motor_left_enable, OUTPUT);
  pinMode(motor_left_input1, OUTPUT);
  pinMode(motor_left_input2, OUTPUT);
  pinMode(motor_right_enable, OUTPUT);
  pinMode(motor_right_input1, OUTPUT);
  pinMode(motor_right_input2, OUTPUT);

  // Ultrasonilise anduri pinid seadistatakse
  pinMode(trigPin, OUTPUT);
  pinMode(echoPin, INPUT);

  // Tagame, et mootoreid ei liigutata alguses
  stopMotors();
}

void loop() {
  // Mõõdame kauguse takistusest
  int distance = measureDistance();

  if (distance <= distance_threshold) {
    // Kui takistus on tuvastatud, peatame mootori ja keerame paremale
    Serial.println("Takistus tuvastatud! Peatame ja keerame paremale.");
    stopMotors();
    delay(500); // Lühike paus
    turnRight(); // Keeramine paremale
    delay(1000); // Pausi aeg 90 kraadi pöördeks
    stopMotors();
    delay(500); // Lühike paus
  } else {
    // Kui takistust pole, liigume edasi
    Serial.println("Takistust pole. Liigume edasi.");
    runMotors(motor_speed, FORWARD, BACKWARD, FORWARD, BACKWARD); // Liikumine edasi
  }
  delay(100); // Lühike viivitus sensori küsitlemise sageduse vähendamiseks
}

// Funktsioon kauguse mõõtmiseks ultrasonilise anduri abil
int measureDistance() {
  // Saadame impulsi trigger pinnile
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);

  // Mõõdame kaja impulsi kestust echo pinnil
  long duration = pulseIn(echoPin, HIGH, ECHO_TIMEOUT); // Aja ületamise piir 30 ms
  if (duration == 0) {
    Serial.println("Ei saanud kaja (ajapiir ületatud).");
    return 999; // Kui ei saa kaja, tagastame väärtuse, mis näitab probleemi
  }

  // Arvutame kauguse sentimeetrites
  int distance = duration * 0.034 / 2;
  // Sanity kontroll: veendume, et kaugus on mõistlikus vahemikus
  if (distance < 2 || distance > 400) {
    Serial.println("Ebausutav kaugus tuvastatud. Uuesti mõõdetakse.");
    return 999; // Tagastame väärtuse, mis näitab probleemi
  }

  Serial.print("Mõõdetud kaugus: ");
  Serial.println(distance);
  return distance;
}

// Funktsioon mõlema mootori käivitamiseks
void runMotors(int speed, int left_dir1, int left_dir2, int right_dir1, int right_dir2) {
  // Vasak mootor
  digitalWrite(motor_left_input1, left_dir1);
  digitalWrite(motor_left_input2, left_dir2);
  analogWrite(motor_left_enable, speed);

  // Parem mootor
  digitalWrite(motor_right_input1, right_dir1);
  digitalWrite(motor_right_input2, right_dir2);
  analogWrite(motor_right_enable, speed);
}

// Funktsioon mõlema mootori peatamiseks
void stopMotors() {
  // Seame kõik mootori juhtimise pinid madalaks (peatame mootori)
  digitalWrite(motor_left_input1, LOW);
  digitalWrite(motor_left_input2, LOW);
  digitalWrite(motor_left_enable, LOW);
  digitalWrite(motor_right_input1, LOW);
  digitalWrite(motor_right_input2, LOW);
  digitalWrite(motor_right_enable, LOW);
}

// Funktsioon roboti pööramiseks paremale
void turnRight() {
  // Vasak mootor edasi, parem mootor tagasi (pööre paremale)
  runMotors(motor_speed, FORWARD, BACKWARD, BACKWARD, FORWARD);
}
